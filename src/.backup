// Interface definitions
interface NextClientConfig {
  debug?: boolean;
  baseUrl: string;
  headers?: Record<string, string>;
  prefix?: string;
}

interface NextClientBodyConfig extends NextClientConfig {
  method: "GET" | "POST" | "PUT" | "PATCH" | "DELETE";
  path: string;
  query?: Record<string, string>;
}

interface NextBodyAppendConfig<T> extends NextClientBodyConfig {
  data: T | Record<string, any>;
  isForm: boolean;
}

interface NextClientExecuterConfig<T> extends NextBodyAppendConfig<T> {
  url: URL;
  formData?: FormData;
}

interface ParamsSend {
  signal?: AbortSignal | null;
  credentials?: RequestCredentials | null;
  mode?: RequestMode | undefined;
  referrerPolicy?: ReferrerPolicy;
}

// Base NextClient class
export class NextClient {
  private config: NextClientConfig;

  constructor(config: NextClientConfig) {
    this.config = config;
  }

  private createRequest(
    method: "GET" | "POST" | "PUT" | "PATCH" | "DELETE",
    path: string,
    query?: Record<string, any>
  ) {
    return new NextClientBody({
      ...this.config,
      method,
      path,
      query,
    });
  }

  get(path: string, query?: Record<string, any>) {
    return this.createRequest("GET", path, query);
  }

  post(path: string, query?: Record<string, any>) {
    return this.createRequest("POST", path, query);
  }

  put(path: string, query?: Record<string, any>) {
    return this.createRequest("PUT", path, query);
  }

  patch(path: string, query?: Record<string, any>) {
    return this.createRequest("PATCH", path, query);
  }

  delete(path: string, query?: Record<string, any>) {
    return this.createRequest("DELETE", path, query);
  }

  send<R>(params?: ParamsSend) {
    const parser = new Parser<NextClientBodyConfig>(
      {
        isForm: false,
        method: "GET",
        path: "",
        query: undefined,
        data: this.config,
        ...this.config,
      },
      params
    );
    return parser.exec<R>();
  }
}

// NextClientBody class
class NextClientBody {
  private config: NextClientBodyConfig;

  constructor(config: NextClientBodyConfig) {
    this.config = config;
  }

  form<T>(data: T | Record<string, any>) {
    return new NextBodyAppend<T>({
      ...this.config,
      data,
      isForm: true,
    });
  }

  json<T>(data: T | Record<string, any>) {
    return new NextBodyAppend<T>({
      ...this.config,
      data,
      isForm: false,
    });
  }

  send<R>(params?: ParamsSend) {
    const parser = new Parser(
      {
        isForm: true,
        query: this.config.query,
        data: undefined,
        ...this.config,
      },
      params
    );
    return parser.exec<R>();
  }
}

// NextFormAppend class
class NextBodyAppend<T> {
  private config: NextBodyAppendConfig<T>;

  constructor(config: NextBodyAppendConfig<T>) {
    this.config = config;
  }

  set(key: string, value: string | Blob | File) {
    this.config.data = {
      ...this.config.data,
      [key]: value,
    };
    return this;
  }

  delete(key: string) {
    let currentData: any = this.config.data;
    delete currentData[key as any];
    this.config.data = currentData;
    return this;
  }
  headers<T>(headers: T | Record<string, string>) {
    this.config.headers = {
      ...this.config.headers,
      ...headers,
    };
    return this;
  }

  send<R>(params?: ParamsSend) {
    const parser = new Parser<T>(this.config, params);
    return parser.exec<R>();
  }
}

class Parser<T> {
  private config: NextBodyAppendConfig<T>;
  private url: URL;
  private formData?: FormData;
  private params?: ParamsSend;

  constructor(config: NextBodyAppendConfig<T>, params?: ParamsSend) {
    this.config = config;
    const url = this.generateUrl();
    this.params = params;

    this.url = url;
    this.formData = this.config.isForm
      ? this.jsonToFormData(config.data)
      : undefined;
  }

  private setSearchParams(
    params: { [key: string]: any },
    prefix = ""
  ): URLSearchParams {
    const searchParams = new URLSearchParams();

    const addParam = (key: string, value: any) => {
      if (typeof value === "object" && !Array.isArray(value)) {
        Object.entries(value).forEach(([nestedKey, nestedValue]) => {
          addParam(`${prefix}${key}[${nestedKey}]`, nestedValue);
        });
      } else {
        searchParams.set(prefix ? `${prefix}${key}` : key, value.toString());
      }
    };

    Object.entries(params).forEach(([key, value]) => addParam(key, value));

    return searchParams;
  }

  private generateUrl() {
    const url = new URL(
      this.config.prefix
        ? `${this.config.prefix}/${this.config.path}`
        : this.config.path,
      this.config.baseUrl
    );
    url.search =
      (this.config.query &&
        this.setSearchParams(this.config.query).toString()) ||
      "";

    return url;
  }

  private jsonToFormData(
    jsonObject: any,
    formData: FormData = new FormData(),
    parentKey: string = ""
  ): FormData {
    for (const key in jsonObject) {
      if (jsonObject.hasOwnProperty(key)) {
        const value = jsonObject[key];
        const formKey = parentKey ? `${parentKey}[${key}]` : key;

        if (value instanceof File) {
          // Handle File
          const formKeyFile = parentKey || key;
          formData.append(formKeyFile, value);
        } else if (Array.isArray(value)) {
          // Handle arrays (including empty and single-value arrays)
          if (value.length === 0) {
            // Append an empty key for empty arrays
            formData.append(formKey, "");
          } else {
            value.forEach((item, index) => {
              const arrayKey = `${formKey}[${index}]`;
              if (item instanceof File) {
                formData.append(formKey, item);
              } else {
                formData.append(arrayKey, item?.toString() || "");
              }
            });
          }
        } else if (
          value &&
          typeof value === "object" &&
          !(value instanceof File)
        ) {
          // Handle nested objects
          this.jsonToFormData(value, formData, formKey);
        } else {
          // Handle primitive values (including null and undefined)
          formData.append(formKey, value?.toString() || "");
        }
      }
    }
    return formData;
  }

  async exec<R>() {
    const executer = new Executer<T>({
      ...this.config,
      url: this.url,
      formData: this.formData,
    });
    return await executer.exec<R>();
  }
}

export class NextApiError extends Error {
  public status: number;
  public statusText: string;
  public url: string;
  public response?: any;

  constructor(
    message: string,
    status: number,
    statusText: string,
    url: string,
    response?: any
  ) {
    super(message);
    this.name = "NextApiError";
    this.status = status;
    this.statusText = statusText;
    this.url = url;
    this.response = {
      status: status,
      statusText: statusText,
      url: url,
      message: message,
      data: response,
    };
  }
}

class Executer<T> {
  private config: NextClientExecuterConfig<T>;

  private params?: ParamsSend;

  constructor(config: NextClientExecuterConfig<T>, params?: ParamsSend) {
    this.config = config;
    this.params = params;
  }

  private fetcher(params?: ParamsSend) {
    const { url, method, data, headers = {}, isForm, formData } = this.config;

    let body: BodyInit | null = null;
    const finalHeaders = { ...headers }; // Copy headers to avoid modifying original object

    if (method !== "GET") {
      if (isForm && formData) {
        body = formData; // Use FormData for form submissions
        // DO NOT set Content-Type for FormData explicitly; the browser sets it with correct boundary
        delete finalHeaders["Content-Type"];
      } else if (data) {
        body = JSON.stringify(data); // Convert JSON data to string
        finalHeaders["Content-Type"] =
          finalHeaders["Content-Type"] || "application/json";
      }
    }

    return fetch(url, {
      method,
      headers: finalHeaders,
      body,
      cache: "no-store",
      signal: params?.signal || null,
      credentials: params?.credentials || "same-origin",
      mode: params?.mode || "cors",
      referrerPolicy: params?.referrerPolicy || "no-referrer",
    });
  }

  async exec<R>(): Promise<{
    data: R | any;
    status: number;
    statusText: string;
    url: string;
    message?: string;
  }> {
    try {
      if (this.config.debug) {
        console.log(
          `Fetching: ${this.config.method} -> ${this.config.url.toString()}`
        );

        if (this.params) {
          console.log(this.params);
        }
      }

      const response = await this.fetcher(this.params);

      if (!response.ok) {
        let errorResponse;
        try {
          errorResponse = await response.json();
        } catch {
          try {
            errorResponse = await response.text();
          } catch (error) {}
        }

        throw new NextApiError(
          `HTTP Error: ${response.status} ${response.statusText}`,
          response.status,
          response.statusText,
          this.config.url.toString(),
          errorResponse
        );
      }

      try {
        const data = await response.json();
        return {
          data: data as R,
          status: response.status,
          statusText: response.statusText,
          url: this.config.url.toString(),
        };
      } catch {
        const data = await response.text();
        {
          return {
            data: data as unknown as R,
            status: response.status,
            statusText: response.statusText,
            url: this.config.url.toString(),
          };
        }
      }
    } catch (error) {
      throw error;
    }
  }
}

export const handleNextError = <T>(
  error: any,
  callback: (e: {
    data?: Partial<T>;
    statusText: string;
    url: string;
    message: string;
  }) => void,

  pass?: () => void
) => {
  if (error instanceof NextApiError) {
    callback({
      data: (error.response?.data as Partial<T>) || {},
      statusText: error.statusText,
      url: error.url,
      message: error.message,
    });
  } else {
    pass?.();
  }
};
