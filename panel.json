{
    "$schema": "https://ui.shadcn.com/schema/registry-item.json",
    "name": "panel",
    "type": "registry:component",
    "title": "Panel",
    "description": "Let users confirm or reject an option.",
    "dependencies": [
        "lucide-react"
    ],
    "files": [
        {
            "path": "components/Panel.tsx",
            "content": "\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport { Fullscreen, Minus, X } from \"lucide-react\";\nimport { useEffect, useRef, useState } from \"react\";\n\ntype Position = {\n  x: number;\n  y: number;\n};\n\ntype Size = {\n  width: number;\n  height: number;\n};\n\ntype PanelProps = {\n  children?: React.ReactNode;\n  isOpen: boolean;\n  onClose: (e: boolean) => void;\n  title?: string;\n  icon?: React.ReactNode;\n};\n\nconst Panel = ({\n  children,\n  isOpen = false,\n  onClose,\n  icon,\n  title = \"Window\",\n}: PanelProps) => {\n  const [isMinimized, setIsMinimized] = useState<boolean>(false);\n  const [position, setPosition] = useState<Position>({ x: 50, y: 50 });\n  const [size, setSize] = useState<Size>({ width: 700, height: 500 });\n  const [focus, setFocus] = useState(false);\n\n  const panelRef = useRef<HTMLDivElement>(null);\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [isResizing, setIsResizing] = useState(false);\n  const [resizeDirection, setResizeDirection] = useState<string>(\"\");\n\n  const positionRef = useRef<Position>(position);\n  const sizeRef = useRef<Size>(size);\n\n  useEffect(() => {\n    positionRef.current = position;\n  }, [position]);\n\n  useEffect(() => {\n    sizeRef.current = size;\n  }, [size]);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      console.log(\"Event target:\", event.target);\n      if (\n        panelRef.current &&\n        !panelRef.current.contains(event.target as Node) &&\n        isOpen &&\n        !isMinimized\n      ) {\n        console.log(\"Clicked outside, closing panel\");\n        setFocus(false);\n      } else {\n        setFocus(true);\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutside, true);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside, true);\n    };\n  }, [isOpen, isMinimized]);\n\n  const startDrag = (e: React.MouseEvent) => {\n    if (isResizing) return;\n    const offsetX = e.clientX - positionRef.current.x;\n    const offsetY = e.clientY - positionRef.current.y;\n    const onMouseMove = (moveEvent: MouseEvent) => {\n      if (\n        size.width === window.innerWidth - 100 &&\n        size.height === window.innerHeight - 100\n      ) {\n        setSize({ width: 700, height: 500 });\n        setPosition({ x: 50, y: 50 });\n      }\n      requestAnimationFrame(() => {\n        setPosition({\n          x: moveEvent.clientX - offsetX,\n          y: moveEvent.clientY - offsetY,\n        });\n      });\n    };\n    const onMouseUp = () => {\n      document.removeEventListener(\"mousemove\", onMouseMove);\n      document.removeEventListener(\"mouseup\", onMouseUp);\n    };\n    document.addEventListener(\"mousemove\", onMouseMove);\n    document.addEventListener(\"mouseup\", onMouseUp);\n  };\n\n  const minimizePanel = () => {\n    setIsMinimized(true);\n    setSize({ width: 50, height: 50 });\n    setPosition({ x: window.innerWidth / 2, y: window.innerHeight - 100 });\n  };\n\n  const restorePanel = () => {\n    setIsMinimized(false);\n    setSize({ width: 700, height: 500 });\n    setPosition({ x: 50, y: 50 });\n  };\n\n  const closePanel = () => {\n    onClose(false);\n    setIsMinimized(false);\n    setSize({ width: 700, height: 500 });\n    setPosition({ x: 50, y: 50 });\n  };\n\n  const fullscreenPanel = () => {\n    if (\n      size.width === window.innerWidth - 100 &&\n      size.height === window.innerHeight - 100\n    ) {\n      setSize({ width: 700, height: 500 });\n      setPosition({ x: 50, y: 50 });\n    } else {\n      setPosition({ x: 50, y: 50 });\n      setSize({\n        width: window.innerWidth - 100,\n        height: window.innerHeight - 100,\n      });\n    }\n  };\n\n  const startResize = (e: React.MouseEvent, direction: string) => {\n    setIsResizing(true);\n    setResizeDirection(direction);\n    const initialWidth = sizeRef.current.width;\n    const initialHeight = sizeRef.current.height;\n    const initialX = e.clientX;\n    const initialY = e.clientY;\n    const initialPanelX = positionRef.current.x;\n    const initialPanelY = positionRef.current.y;\n    const onMouseMove = (moveEvent: MouseEvent) => {\n      requestAnimationFrame(() => {\n        let newWidth = initialWidth;\n        let newHeight = initialHeight;\n        let newX = initialPanelX;\n        let newY = initialPanelY;\n\n        if (direction === \"top\") {\n          newHeight = Math.max(\n            initialHeight - (moveEvent.clientY - initialY),\n            100\n          );\n          newY = initialPanelY + (moveEvent.clientY - initialY);\n        } else if (direction === \"bottom\") {\n          newHeight = Math.max(\n            initialHeight + (moveEvent.clientY - initialY),\n            100\n          );\n        } else if (direction === \"left\") {\n          newWidth = Math.max(\n            initialWidth - (moveEvent.clientX - initialX),\n            150\n          );\n          newX = initialPanelX + (moveEvent.clientX - initialX);\n        } else if (direction === \"right\") {\n          newWidth = Math.max(\n            initialWidth + (moveEvent.clientX - initialX),\n            150\n          );\n        } else if (direction === \"topLeft\") {\n          newWidth = Math.max(\n            initialWidth - (moveEvent.clientX - initialX),\n            150\n          );\n          newHeight = Math.max(\n            initialHeight - (moveEvent.clientY - initialY),\n            100\n          );\n          newX = initialPanelX + (moveEvent.clientX - initialX);\n          newY = initialPanelY + (moveEvent.clientY - initialY);\n        } else if (direction === \"topRight\") {\n          newWidth = Math.max(\n            initialWidth + (moveEvent.clientX - initialX),\n            150\n          );\n          newHeight = Math.max(\n            initialHeight - (moveEvent.clientY - initialY),\n            100\n          );\n          newY = initialPanelY + (moveEvent.clientY - initialY);\n        } else if (direction === \"bottomLeft\") {\n          newWidth = Math.max(\n            initialWidth - (moveEvent.clientX - initialX),\n            150\n          );\n          newHeight = Math.max(\n            initialHeight + (moveEvent.clientY - initialY),\n            100\n          );\n          newX = initialPanelX + (moveEvent.clientX - initialX);\n        } else if (direction === \"bottomRight\") {\n          newWidth = Math.max(\n            initialWidth + (moveEvent.clientX - initialX),\n            150\n          );\n          newHeight = Math.max(\n            initialHeight + (moveEvent.clientY - initialY),\n            100\n          );\n        }\n\n        setSize({ width: newWidth, height: newHeight });\n        setPosition({ x: newX, y: newY });\n      });\n    };\n\n    const onMouseUp = () => {\n      setIsResizing(false);\n      document.removeEventListener(\"mousemove\", onMouseMove);\n      document.removeEventListener(\"mouseup\", onMouseUp);\n    };\n\n    document.addEventListener(\"mousemove\", onMouseMove);\n    document.addEventListener(\"mouseup\", onMouseUp);\n  };\n\n  return (\n    <>\n      {!isMinimized && isOpen && (\n        <div\n          ref={panelRef}\n          className={cn(\n            `fixed  bg-white  shadow-lg shadow-gray-400/10  rounded overflow-hidden z-40`,\n            focus && \"z-50\"\n          )}\n          style={{\n            top: `${position.y}px`,\n            left: `${position.x}px`,\n            width: `${size.width}px`,\n            height: `${size.height}px`,\n          }}\n        >\n          <div\n            ref={headerRef}\n            className=\"flex justify-between items-center p-3 bg-primary text-secondary cursor-move border-b select-none\"\n            style={{ height: \"40px\" }}\n            onMouseDown={startDrag}\n          >\n            <div className=\"flex justify-start items-center gap-3\">\n              {icon}\n              <span>{title}</span>\n            </div>\n            <div className=\"flex gap-2 justify-center items-center\">\n              <button\n                onClick={minimizePanel}\n                className=\"bg-white w-5 h-5 flex justify-center items-center text-gray-900 rounded-full cursor-pointer\"\n              >\n                <Minus size={12} />\n              </button>\n              <button\n                onClick={fullscreenPanel}\n                className=\"bg-white w-5 h-5 flex justify-center items-center text-gray-900 rounded-full cursor-pointer\"\n              >\n                <Fullscreen size={12} />\n              </button>\n              <button\n                onClick={closePanel}\n                className=\"bg-white w-5 h-5 flex justify-center items-center text-gray-900 rounded-full cursor-pointer\"\n              >\n                <X size={12} />\n              </button>\n            </div>\n          </div>\n\n          <div\n            className=\"overflow-auto\"\n            style={{ height: `calc(${size.height}px - 40px)` }}\n          >\n            {children}\n          </div>\n\n          <div\n            className=\"select-none absolute bottom-0  left-0 w-6 h-4 bg-transparent cursor-sw-resize z-20\"\n            onMouseDown={(e) => startResize(e, \"bottomLeft\")}\n          />\n          <div\n            className=\"select-none absolute bottom-0  right-0 w-6 h-4 bg-transparent cursor-se-resize z-20\"\n            onMouseDown={(e) => startResize(e, \"bottomRight\")}\n          />\n\n          <div\n            className=\"select-none absolute bottom-0  left-0  w-full h-2 hover:bg-gray-400/40 rounded-3xl transition-all cursor-ns-resize \"\n            onMouseDown={(e) => startResize(e, \"bottom\")}\n          />\n          <div\n            className=\"select-none absolute left-0 top-11  w-2 h-full hover:bg-gray-400/40 transition-all cursor-ew-resize\"\n            onMouseDown={(e) => startResize(e, \"left\")}\n          />\n          <div\n            className=\"select-none absolute right-0 top-11  w-2 h-full hover:bg-gray-400/40 transition-all cursor-ew-resize\"\n            onMouseDown={(e) => startResize(e, \"right\")}\n          />\n        </div>\n      )}\n\n      {isMinimized && (\n        <div\n          className=\"fixed px-3 gap-3  h-10 bg-primary rounded-xl flex justify-center items-center text-white cursor-move shadow-lg z-40  select-none\"\n          style={{\n            top: `${position.y + size.height}px`,\n            left: `${position.x + size.width}px`,\n          }}\n          onDoubleClick={restorePanel}\n          onMouseDown={startDrag}\n        >\n          <div\n            onClick={closePanel}\n            className=\"w-4 h-4 shadow cursor-pointer  bg-red-500 rounded-full absolute top-0 right-0 -mt-1 -ml-1 flex justify-center items-center\"\n          >\n            <X size={10} />\n          </div>\n          {icon}\n          <p className=\"font-semibold\">{title}</p>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Panel;",
            "type": "registry:component",
            "target": "components/Panel.tsx"
        }
    ]
}
